{"version":3,"sources":["firebase.js","Left_chat.js","StateProvider.js","Left.js","Chat.js","reducer.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","auth","provider","GoogleAuthProvider","Left_chat","id","name","addNewChat","useState","seed","setSeed","messages","setMessages","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","Math","floor","random","onClick","prompt","add","className","to","Avatar","src","message","StateContent","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","Left","user","rooms","setRooms","photoURL","IconButton","type","placeholder","room","key","Chat","input","setInput","roomId","useParams","roomName","setRoomName","Date","length","timestamp","toDate","toUTCString","m","displayName","onChange","e","target","preventDefault","FieldValue","serverTimestamp","then","console","log","catch","error","actionTypes","state","action","Login","dispatch","alt","Button","signInWithPopup","result","alert","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ddb17830.chunk.js","sourcesContent":["// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nimport firebase from 'firebase'\r\nconst firebaseConfig = {\r\n   apiKey: \"AIzaSyDnpVzl6su53gIfxxcoV7jDT6tlu0CEhaU\",\r\n   authDomain: \"whatsappclone-56301.firebaseapp.com\",\r\n   databaseURL: \"https://whatsappclone-56301.firebaseio.com\",\r\n   projectId: \"whatsappclone-56301\",\r\n   storageBucket: \"whatsappclone-56301.appspot.com\",\r\n   messagingSenderId: \"53412985781\",\r\n   appId: \"1:53412985781:web:d994150b2f993c29c277fc\",\r\n   measurementId: \"G-TYHJS7K8E5\"\r\n };\r\n\r\nfirebase.initializeApp(firebaseConfig)\r\n const db=firebase.firestore()\r\n const auth=firebase.auth()\r\n const provider=new firebase.auth.GoogleAuthProvider() \r\n export {auth,provider}\r\n export default db","import { Avatar } from '@material-ui/core'\r\nimport React,{useState,useEffect} from 'react'\r\nimport './left_chat.css'\r\nimport db from './firebase'\r\nimport {Link} from \"react-router-dom\"\r\n\r\nfunction Left_chat({id,name,addNewChat}) { \r\n   let k\r\n   {/*adding a props named addNewChat */}\r\n   const [seed,setSeed]=useState('')\r\n   const [messages,setMessages]=useState(\"\")\r\n   useEffect(()=>{\r\n      if(id){\r\n         db.collection('rooms').doc(id).collection('messeges').orderBy('timestamp','desc').onSnapshot((snapshot) => setMessages(snapshot.docs.map((doc)=>doc.data())))\r\n      }\r\n   },[id])\r\n   useEffect(() =>{\r\n      setSeed(Math.floor(Math.random()*5000))\r\n   }, [])\r\n   const CreateChat=()=>{\r\n      const name=prompt(\"Enter a new name for chat\")\r\n      if(name){\r\n         {/* send new chat to database */}\r\n         db.collection('rooms').add({\r\n            name:name,\r\n         })\r\n      }\r\n      k=seed\r\n   }\r\n   return !addNewChat ?(\r\n      <Link to= {`/rooms/${id}`} >\r\n         <div className=\"chat\">\r\n         <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`}/>\r\n         <div className=\"chatInfo\">\r\n            <h2>{name}</h2>\r\n            <p>{messages[0]?.message}</p>\r\n         </div>\r\n      </div>\r\n    </Link>\r\n   ):(\r\n      <div onClick={CreateChat} className=\"chat\">\r\n         <h2>Add new chat</h2>\r\n      </div>\r\n   )\r\n}\r\nexport default Left_chat","import React,{createContext,useContext,useReducer} from 'react'\r\nexport const StateContent =createContext()\r\nexport const StateProvider=(\r\n   {\r\n      reducer,initialState,children\r\n   })=>(\r\n      <StateContent.Provider value={useReducer(reducer,initialState)}\r\n      >{children}\r\n      </StateContent.Provider>\r\n)\r\n\r\nexport const useStateValue=()=> useContext(StateContent)","import React,{useState,useEffect} from 'react'\r\nimport './Left.css'\r\nimport DonutLargeIcon from '@material-ui/icons/DonutLarge'\r\nimport ChatIcon from '@material-ui/icons/Chat'\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert'\r\nimport { Avatar, IconButton } from '@material-ui/core'\r\nimport SearchIcon from '@material-ui/icons/Search'\r\nimport Left_chat from './Left_chat'\r\nimport db from './firebase'\r\nimport { useStateValue } from './StateProvider';\r\nfunction Left() {\r\n   const [{user},dispatch]=useStateValue()\r\n   const [rooms,setRooms]=useState([])\r\n   useEffect(() => {\r\n      db.collection('rooms').onSnapshot(snapshot=>{\r\n         setRooms(snapshot.docs.map(doc =>({\r\n            id:doc.id,\r\n            data:doc.data()\r\n         })))\r\n      })\r\n\r\n   })\r\n   return (\r\n      <div className=\"Left\">\r\n         <div className=\"left_header\">\r\n         <div className=\"pic\">\r\n         <Avatar src={user?.photoURL}/>\r\n         </div>\r\n            \r\n            <div className=\"left_header_icons\">\r\n               <IconButton>\r\n                  <DonutLargeIcon/>\r\n               </IconButton>\r\n               <IconButton>\r\n                  <ChatIcon/>\r\n               </IconButton>\r\n               <IconButton>\r\n               <MoreVertIcon/>\r\n               </IconButton>\r\n               \r\n            </div>\r\n         </div>\r\n         <div className=\"left_search\">\r\n\r\n            <div className=\"searchContainer\">\r\n            <SearchIcon />\r\n            <input type=\"text\" placeholder=\"Search or start a new chat\" />\r\n            </div>\r\n         </div>\r\n         <div className=\"Button\">\r\n         <button type=\"submit\">\r\n            <IconButton>\r\n            <SearchIcon />\r\n            </IconButton>\r\n            </button>\r\n         </div>\r\n         <div className=\"left_chats\">\r\n            <Left_chat addNewChat/>\r\n                {/*getting values from DB to UI */}\r\n              { rooms.map((room)=>(\r\n                  <Left_chat key={room.id} id={room.id} name={room.data.name}/>\r\n               ))\r\n            }\r\n         </div>\r\n         \r\n      </div>\r\n   )\r\n}\r\n\r\nexport default Left\r\n","import { Avatar,IconButton } from '@material-ui/core'\r\nimport React, { useState, useEffect } from 'react'\r\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert'\r\nimport AttachFileIcon from '@material-ui/icons/AttachFile'\r\nimport SearchIcon from '@material-ui/icons/Search'\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport {useParams} from 'react-router-dom'\r\nimport './Chat.css'\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport db from './firebase'//local firebase\r\nimport firebase from 'firebase'//actual firebase\r\nimport { useStateValue } from './StateProvider';\r\n\r\nfunction Chat() {\r\n   const [seed, setSeed] = useState(\"\")\r\n   const [input,setInput]= useState(\"\")\r\n   const [messages,setMessages]=useState([])\r\n   const {roomId}= useParams()\r\n   const[roomName,setRoomName]=useState(\"\")\r\n   const[{user},dispatch]=useStateValue()\r\n   useEffect(()=>{\r\n      if(roomId){\r\n         db.collection('rooms').doc(roomId).onSnapshot(snapshot =>{\r\n            setRoomName(snapshot.data().name)\r\n         } )\r\n         db.collection('rooms').doc(roomId).collection('messeges').orderBy('timestamp','asc').onSnapshot(snapshot=>{\r\n            setMessages(snapshot.docs.map(doc=>doc.data()))\r\n         })\r\n      }\r\n   },[roomId])\r\n\r\n   useEffect(() => {\r\n      setSeed(Math.floor(Math.random() * 5000))\r\n   }, [roomId])\r\n   const sendMessege=(e)=>{\r\n      e.preventDefault()\r\n      db.collection('rooms').doc(roomId).collection('messeges').add(\r\n         {\r\n            message:input,\r\n            name:user.displayName,// we will get from google authentication\r\n            timestamp:firebase.firestore.FieldValue.serverTimestamp(),\r\n\r\n         }\r\n      ).then(() => {\r\n         console.log('Done')\r\n     })\r\n     .catch(error => {\r\n         console.error(error)\r\n     })\r\n      setInput(\"\")\r\n   }\r\n  \r\n   return (\r\n      <div className=\"Chat\">\r\n         <div className=\"Chat_header\">\r\n            <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`} />\r\n            <div className=\"header_info\">\r\n               <h3>{roomName}</h3>\r\n               <p>\r\n                  last seen{\" \"}\r\n                  {\r\n                     new Date(\r\n                        messages[messages.length-1]?.timestamp?.toDate()).toUTCString() \r\n                  }\r\n               </p>\r\n            </div>\r\n            <div className=\"header_icons\">\r\n            <IconButton>\r\n                  <SearchIcon/>\r\n               </IconButton>\r\n               <IconButton>\r\n                  <AttachFileIcon/>\r\n               </IconButton>\r\n               <IconButton>\r\n               <MoreVertIcon/>\r\n               </IconButton>\r\n            </div>\r\n         </div>\r\n         <div className=\"Chat_body\">\r\n         {messages.map((m)=>(\r\n            <p className={`messege ${m.name===user.displayName && \"chat_reciever\"}`}>\r\n            <span className=\"chat_name\">{m.name}</span>\r\n               {m.message}\r\n            <span className=\"timestamp\">\r\n               {new Date(m.timestamp?.toDate()).toUTCString()}\r\n            </span>\r\n            </p>\r\n         )\r\n         )\r\n         }\r\n            \r\n         </div>\r\n         <div className=\"Chat_info\">\r\n         <IconButton><InsertEmoticonIcon/></IconButton>\r\n            <form>\r\n               <input type=\"text\" value={input} \r\n               onChange={(e)=>setInput(e.target.value)}\r\n               placeholder=\"Send a messege\"/>\r\n               <button onClick={sendMessege}\r\n               type=\"submit\">\r\n               <IconButton>\r\n               <SendIcon/>\r\n               </IconButton>\r\n               \r\n               </button>\r\n            </form>\r\n            <IconButton><MicIcon/></IconButton>\r\n         </div>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default Chat\r\n","export const initialState={\r\n   user:null,\r\n}\r\nexport const actionTypes={\r\n   SET_USER:\"SET_USER\"\r\n}\r\n\r\nconst reducer =(state,action)=>{\r\n   console.log(action)\r\n   switch(action.type){\r\n      case actionTypes.SET_USER:\r\n         return{\r\n            ...state,\r\n            user:action.user,\r\n         }\r\n         default:\r\n            return state\r\n}}\r\nexport default reducer\r\n","import { Button } from '@material-ui/core'\r\nimport React from 'react'\r\nimport { auth,provider} from './firebase'\r\nimport './Login.css'\r\nimport { useStateValue } from './StateProvider';\r\nimport { actionTypes } from './reducer'\r\n\r\nfunction Login() {\r\n   const [{},dispatch]=useStateValue()\r\n  const SignIn=()=>{\r\n     auth.signInWithPopup(provider).then((result)=>{\r\n        dispatch({\r\n         type:actionTypes.SET_USER,\r\n         user:result.user\r\n        })\r\n     }).catch((error)=>alert(error.message))\r\n  }\r\n   return (\r\n      <div className=\"Login\">\r\n         <div className=\"loginContainer\">\r\n            <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/6/6b/WhatsApp.svg/1200px-WhatsApp.svg.png\"\r\n            alt=\"whatsapp_img\"/>\r\n            <div className=\"text\">\r\n               <h1>Sign In</h1>\r\n            </div>\r\n            <Button onClick={SignIn}>\r\n               Sign In via Google\r\n            </Button>\r\n         </div>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default Login\r\n","import React from 'react';\nimport './App.css';\nimport Left from './Left'\nimport Chat from './Chat'\nimport Login from './Login'\nimport { BrowserRouter as Router, Route,Switch } from 'react-router-dom'\nimport { useStateValue } from './StateProvider';\nfunction App() {\n  const [{user},dispatch]=useStateValue()\n  return (\n    <div className=\"App\">\n    {/* app body */}\n    {\n      !user?(\n        <Login/>\n      ):(\n        <div className=\"App_body\">\n    <Router>\n    <Left/>\n      <Switch> \n      <Route path=\"/rooms/:roomId\">\n        <Chat/>\n      </Route>\n      <Route path=\"/\">\n        <Chat/>\n      </Route>\n      </Switch>\n    </Router>\n    </div>\n  )\n}\n</div>)\n    }\n    \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reducer,{initialState} from \"./reducer\"\nimport {StateProvider} from \"./StateProvider\"\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(\n  <React.StrictMode>\n  <StateProvider initialState={initialState}\n  reducer={reducer}>\n    <App />\n    </StateProvider>\n  </React.StrictMode>\n    ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}